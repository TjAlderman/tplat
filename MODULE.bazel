# Specify information about the current module, including its name, metadata, and so on...
module(
    name = "tplat",
    version = "1.0.0" # Bazel does not enforce any specific version format...
)

# Specify direct dependencies on other Bazel modules
bazel_dep(name = "aspect_rules_py", version = "0.5.0")

bazel_dep(
    name = "rules_python", # We can refer to this Bazel module with "rules_python". Alternatively, by specifying repo_name, we could assign another name
    dev_dependency = True,
    version = "0.27.1"
)

# Directives related to module extensions
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.10",
)
use_repo(python, "python_versions")

register_toolchains(
    "@python_versions//:all"
)

# rules_py recommend using legacy rules_python pip.parse...
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip") # Return module extension proxy "pip"
pip.parse(
    hub_name = "py3_deps",
    python_version = "3.10",
    requirements_lock = "//toolchains/python:requirements3_bazel_lock.txt",
    requirements_windows= "//toolchains/python:requirements3_windows.txt",
)
use_repo(pip, "py3_deps") # Import the "py3_deps" repo generated by the given module extension proxy; in this case, "pip"